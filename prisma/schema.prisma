generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Judge {
  id                 String               @id @default(cuid())
  name               String
  generatedPassword  String
  isLoggedIn         Boolean              @default(false)
  FormalAttireScores FormalAttireScores[]
  QuestionAndAnswerScores QuestionAndAnswerScores[]
  SwimwearScores     SwimwearScores[]

  FinalRoundScores FinalRoundScores[]
}

model Admin {
  id         String  @id @default(cuid())
  email      String
  password   String
  isLoggedIn Boolean @default(false)
}

model Contestant {
  id                 String               @id @default(cuid())
  name               String
  gender             Gender
  age                Int
  department         String
  contestantNumber   Int
  FormalAttireScores FormalAttireScores[]
  QuestionAndAnswerScores QuestionAndAnswerScores[]
  SwimwearScores     SwimwearScores[]

  FinalRoundScores FinalRoundScores[]
}

model PageantState {
  id    Int   @id @default(autoincrement())
  state State
}

model SwimwearScores {
  id           Int                 @id @default(autoincrement())
  judgeId      String
  contestantId String
  subCategory  SwimwearSubCategory
  score        Int
  contestant   Contestant          @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  judge        Judge               @relation(fields: [judgeId], references: [id], onDelete: Cascade)
}

model FormalAttireScores {
  id           Int                     @id @default(autoincrement())
  judgeId      String
  contestantId String
  score        Int
  subCategory  FormalAttireSubCategory
  contestant   Contestant              @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  judge        Judge                   @relation(fields: [judgeId], references: [id], onDelete: Cascade)
}

model QuestionAndAnswerScores {
  id           Int                          @id @default(autoincrement())
  judgeId      String
  contestantId String
  score        Int
  subCategory  QuestionAndAnswerSubCategory
  contestant   Contestant                   @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  judge        Judge                        @relation(fields: [judgeId], references: [id], onDelete: Cascade)
}

model FinalRoundScores {
  id           Int                          @id @default(autoincrement())
  judgeId      String
  contestantId String
  subCategory  FinalRoundSubCategory
  score        Int
  contestant   Contestant                   @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  judge        Judge                        @relation(fields: [judgeId], references: [id], onDelete: Cascade)
}

model TabulationDesignVariables {
  id           Int                          @id @default(autoincrement())
  color        String
  iconName     String
  eventName    String
}

enum SwimwearSubCategory {
  BEAUTY_OF_FIGURE
  STAGE_PRESENCE
  POISE_AND_BEARING
}

enum FormalAttireSubCategory {
  ATTIRE_AND_CARRIAGE
  STAGE_PRESENCE
  POISE_AND_BEARING
}

enum QuestionAndAnswerSubCategory {
  INTELLIGENCE
  POISE_AND_PERSONALITY
}

enum FinalRoundSubCategory {
  INTELLIGENCE_AND_WIT
  POISE_CONFIDENCE_AND_PERSONALITY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum State {
  swimwear
  formalAttire
  questionAndAnswer
  finalRound
}
